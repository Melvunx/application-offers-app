// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  offers        Offer[]
  notifications Notification[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Offer {
  id            String         @id @default(cuid())
  title         String?
  type          TypeOffer      @default(JOBBOARD)
  company       String
  url           String
  applyDate     DateTime
  location      String
  status        Status         @default(PENDING)
  isArchived    Boolean        @default(false)
  isFavorite    Boolean        @default(false)
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  User          User           @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId])
  @@map("offers")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  offerId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer     Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@unique([userId, offerId])
  @@map("notifications")
}

enum TypeOffer {
  SPONTANEOUS
  JOBBOARD
}

enum Status {
  PENDING
  INTERVIEW
  REJECTED
  ACCEPTED
}
